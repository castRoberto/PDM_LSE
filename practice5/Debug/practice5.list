
practice5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cb4  08002cb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000074  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008bda  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b41  00000000  00000000  00028c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e0  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ee  00000000  00000000  0002af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025c1d  00000000  00000000  0002b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c516  00000000  00000000  0005119b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e18e2  00000000  00000000  0005d6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e60  00000000  00000000  0013ef94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00140df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002b38 	.word	0x08002b38

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08002b38 	.word	0x08002b38

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <buttonPressed>:
 *
 * @param None
 *
 * @return None
 */
static void buttonPressed (void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

    keyPressed = true;
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <buttonPressed+0x14>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]

}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000045 	.word	0x20000045

08000510 <buttonReleased>:
 *
 * @param None
 *
 * @return None
 */
static void buttonReleased (void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

    keyPressed = false;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <buttonReleased+0x14>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]

}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20000045 	.word	0x20000045

08000528 <API_debounceReadKey>:
 *
 * @param None.
 *
 * @return returnValue : bool_t; Button was pressed.
 */
bool_t API_debounceReadKey (void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

	bool_t returnValue = keyPressed;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <API_debounceReadKey+0x24>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	71fb      	strb	r3, [r7, #7]

	if (keyPressed) { buttonReleased (); }
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <API_debounceReadKey+0x24>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <API_debounceReadKey+0x18>
 800053c:	f7ff ffe8 	bl	8000510 <buttonReleased>

	return returnValue;
 8000540:	79fb      	ldrb	r3, [r7, #7]

}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000045 	.word	0x20000045

08000550 <API_debounceFsmInit>:
 *
 * @param void.
 *
 * @return void.
 */
void API_debounceFsmInit (void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	currentState = BUTTON_UP;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <API_debounceFsmInit+0x18>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/* Initialize API delay */
	API_delayInit (&debounceDelay, DEBOUNCE_STABILIZATION_TIME_40MS);
 800055a:	2128      	movs	r1, #40	; 0x28
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <API_debounceFsmInit+0x1c>)
 800055e:	f000 f889 	bl	8000674 <API_delayInit>

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000044 	.word	0x20000044
 800056c:	20000038 	.word	0x20000038

08000570 <API_debounceFsmUpdate>:
 *
 * @param None
 *
 * @return None
 */
void API_debounceFsmUpdate (void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

	uint8_t buttonState = BSP_PB_GetState (BUTTON_USER);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fc3c 	bl	8000df4 <BSP_PB_GetState>
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]

	switch (currentState) {
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d849      	bhi.n	800061c <API_debounceFsmUpdate+0xac>
 8000588:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <API_debounceFsmUpdate+0x20>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005af 	.word	0x080005af
 8000598:	080005df 	.word	0x080005df
 800059c:	080005ed 	.word	0x080005ed

		case BUTTON_UP: {

			if (buttonState) { currentState = BUTTON_FALLING; }
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d03d      	beq.n	8000622 <API_debounceFsmUpdate+0xb2>
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
			break;
 80005ac:	e039      	b.n	8000622 <API_debounceFsmUpdate+0xb2>

		}

		case BUTTON_FALLING: {

			if (API_delayRead (&debounceDelay)) {
 80005ae:	4823      	ldr	r0, [pc, #140]	; (800063c <API_debounceFsmUpdate+0xcc>)
 80005b0:	f000 f87c 	bl	80006ac <API_delayRead>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d035      	beq.n	8000626 <API_debounceFsmUpdate+0xb6>

				currentState = buttonState? BUTTON_DOWN : BUTTON_UP;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <API_debounceFsmUpdate+0x54>
 80005c0:	2202      	movs	r2, #2
 80005c2:	e000      	b.n	80005c6 <API_debounceFsmUpdate+0x56>
 80005c4:	2200      	movs	r2, #0
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 80005c8:	701a      	strb	r2, [r3, #0]

				if (currentState == BUTTON_DOWN) {
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d129      	bne.n	8000626 <API_debounceFsmUpdate+0xb6>

					buttonPressed ();
 80005d2:	f7ff ff91 	bl	80004f8 <buttonPressed>
					API_uartSendString ((uint8_t*)FALLING_MSG);
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <API_debounceFsmUpdate+0xd0>)
 80005d8:	f000 fb18 	bl	8000c0c <API_uartSendString>

				}

			}

			break;
 80005dc:	e023      	b.n	8000626 <API_debounceFsmUpdate+0xb6>

		}

		case BUTTON_DOWN: {

			if (!buttonState) {	currentState = BUTTON_RAISING;	}
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d122      	bne.n	800062a <API_debounceFsmUpdate+0xba>
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	701a      	strb	r2, [r3, #0]
			break;
 80005ea:	e01e      	b.n	800062a <API_debounceFsmUpdate+0xba>
		}

		case BUTTON_RAISING: {

			if (API_delayRead (&debounceDelay)) {
 80005ec:	4813      	ldr	r0, [pc, #76]	; (800063c <API_debounceFsmUpdate+0xcc>)
 80005ee:	f000 f85d 	bl	80006ac <API_delayRead>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01a      	beq.n	800062e <API_debounceFsmUpdate+0xbe>

				currentState = (!buttonState)? BUTTON_UP : BUTTON_DOWN;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <API_debounceFsmUpdate+0x92>
 80005fe:	2200      	movs	r2, #0
 8000600:	e000      	b.n	8000604 <API_debounceFsmUpdate+0x94>
 8000602:	2202      	movs	r2, #2
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 8000606:	701a      	strb	r2, [r3, #0]

				if (currentState == BUTTON_UP) {
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <API_debounceFsmUpdate+0xc8>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10e      	bne.n	800062e <API_debounceFsmUpdate+0xbe>

					buttonReleased ();
 8000610:	f7ff ff7e 	bl	8000510 <buttonReleased>
					API_uartSendString ((uint8_t*)RISING_MSG);
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <API_debounceFsmUpdate+0xd4>)
 8000616:	f000 faf9 	bl	8000c0c <API_uartSendString>

				}

			}

			break;
 800061a:	e008      	b.n	800062e <API_debounceFsmUpdate+0xbe>

		}

		default: {

			API_debounceFsmInit ();
 800061c:	f7ff ff98 	bl	8000550 <API_debounceFsmInit>
			break;
 8000620:	e006      	b.n	8000630 <API_debounceFsmUpdate+0xc0>
			break;
 8000622:	bf00      	nop
 8000624:	e004      	b.n	8000630 <API_debounceFsmUpdate+0xc0>
			break;
 8000626:	bf00      	nop
 8000628:	e002      	b.n	8000630 <API_debounceFsmUpdate+0xc0>
			break;
 800062a:	bf00      	nop
 800062c:	e000      	b.n	8000630 <API_debounceFsmUpdate+0xc0>
			break;
 800062e:	bf00      	nop

		}

	}

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000044 	.word	0x20000044
 800063c:	20000038 	.word	0x20000038
 8000640:	08002bb8 	.word	0x08002bb8
 8000644:	08002be0 	.word	0x08002be0

08000648 <isTimeOut>:
 * @param now: Current time
 * @param delay: Time structure
 *
 * @return timeOut.
 */
static bool_t isTimeOut (tick_t now, delay_t* delay) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]

	return ((now - delay->startTime) >= delay->duration);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	1ad2      	subs	r2, r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	429a      	cmp	r2, r3
 8000660:	bf2c      	ite	cs
 8000662:	2301      	movcs	r3, #1
 8000664:	2300      	movcc	r3, #0
 8000666:	b2db      	uxtb	r3, r3

}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <API_delayInit>:

void API_delayInit( delay_t* delay, tick_t duration ) {
 8000674:	b480      	push	{r7}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]

	if (delay != NULL) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00d      	beq.n	80006a0 <API_delayInit+0x2c>

		*delay = (delay_t) {
			.startTime = 0,
			.duration = (duration > 0)? duration : DEFAULT_PERIOD_10MS,
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <API_delayInit+0x1a>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	e000      	b.n	8000690 <API_delayInit+0x1c>
 800068e:	2305      	movs	r3, #5
		*delay = (delay_t) {
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	2100      	movs	r1, #0
 8000694:	6011      	str	r1, [r2, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6053      	str	r3, [r2, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	721a      	strb	r2, [r3, #8]
			.running = false
		};

	}

}
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <API_delayRead>:

bool_t API_delayRead( delay_t * delay ) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	bool_t timeOut = false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]

	if (delay != NULL) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d01c      	beq.n	80006f8 <API_delayRead+0x4c>

		tick_t currentTime = BSP_GetCurrentTime ();
 80006be:	f000 fbaf 	bl	8000e20 <BSP_GetCurrentTime>
 80006c2:	60b8      	str	r0, [r7, #8]

		if (!(delay->running)) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7a1b      	ldrb	r3, [r3, #8]
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <API_delayRead+0x34>

			delay->running = true;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	721a      	strb	r2, [r3, #8]

			delay->startTime = currentTime;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e00b      	b.n	80006f8 <API_delayRead+0x4c>

		} else {

			if ( isTimeOut (currentTime, delay) ) {
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f7ff ffb0 	bl	8000648 <isTimeOut>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <API_delayRead+0x4c>

				timeOut = true;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]

				delay->running = false;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	721a      	strb	r2, [r3, #8]

		}

	}

	return timeOut;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <API_delayWrite>:

void API_delayWrite( delay_t * delay, tick_t duration ) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]

	if ((delay != NULL) && (duration > 0)) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <API_delayWrite+0x1c>
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <API_delayWrite+0x1c>

		delay->duration = duration;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	605a      	str	r2, [r3, #4]

	}

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <getParity>:
 *
 * @param buff: Temporary conversion buffer
 *
 * @return None
 */
static void getParity (uint8_t* buff) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	if (buff != NULL) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d046      	beq.n	80007c8 <getParity+0x9c>

		memset(buff, CLEAN_CHARACTER, LEN_TMP_MSG);
 800073a:	2300      	movs	r3, #0
 800073c:	220a      	movs	r2, #10
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f002 f9bd 	bl	8002ac0 <memset>

		switch (huart3.Init.Parity) {
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <getParity+0xa4>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800074e:	d022      	beq.n	8000796 <getParity+0x6a>
 8000750:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000754:	d82a      	bhi.n	80007ac <getParity+0x80>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <getParity+0x36>
 800075a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800075e:	d00d      	beq.n	800077c <getParity+0x50>
 8000760:	e024      	b.n	80007ac <getParity+0x80>

			case UART_PARITY_NONE: {

				strcat ((char*) buff, (str_cast)"None");
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fd42 	bl	80001ec <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <getParity+0xa8>)
 8000772:	6810      	ldr	r0, [r2, #0]
 8000774:	6018      	str	r0, [r3, #0]
 8000776:	7912      	ldrb	r2, [r2, #4]
 8000778:	711a      	strb	r2, [r3, #4]
				break;
 800077a:	e025      	b.n	80007c8 <getParity+0x9c>

			}

			case UART_PARITY_EVEN: {

				strcat ((char*) buff, (str_cast)"Even");
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd35 	bl	80001ec <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <getParity+0xac>)
 800078c:	6810      	ldr	r0, [r2, #0]
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	711a      	strb	r2, [r3, #4]
				break;
 8000794:	e018      	b.n	80007c8 <getParity+0x9c>

			}

			case UART_PARITY_ODD: {

				strcat ((char*) buff, (str_cast)"Odd");
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fd28 	bl	80001ec <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <getParity+0xb0>)
 80007a6:	6810      	ldr	r0, [r2, #0]
 80007a8:	6018      	str	r0, [r3, #0]
				break;
 80007aa:	e00d      	b.n	80007c8 <getParity+0x9c>

			}

			default: {

				strcat ((char*) buff, (str_cast)"unknown");
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fd1d 	bl	80001ec <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4909      	ldr	r1, [pc, #36]	; (80007e0 <getParity+0xb4>)
 80007bc:	461a      	mov	r2, r3
 80007be:	460b      	mov	r3, r1
 80007c0:	cb03      	ldmia	r3!, {r0, r1}
 80007c2:	6010      	str	r0, [r2, #0]
 80007c4:	6051      	str	r1, [r2, #4]
				break;
 80007c6:	bf00      	nop

		}

	}

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000048 	.word	0x20000048
 80007d4:	08002b50 	.word	0x08002b50
 80007d8:	08002b58 	.word	0x08002b58
 80007dc:	08002b60 	.word	0x08002b60
 80007e0:	08002b64 	.word	0x08002b64

080007e4 <getStopBits>:
 *
 * @param buff: Temporary conversion buffer
 *
 * @return None
 */
static void getStopBits (uint8_t* buff) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	if (buff != NULL) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d039      	beq.n	8000866 <getStopBits+0x82>

		memset(buff, CLEAN_CHARACTER, LEN_TMP_MSG);
 80007f2:	2300      	movs	r3, #0
 80007f4:	220a      	movs	r2, #10
 80007f6:	4619      	mov	r1, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f002 f961 	bl	8002ac0 <memset>

		switch (huart3.Init.StopBits) {
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <getStopBits+0x8c>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <getStopBits+0x2a>
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d00f      	beq.n	800082c <getStopBits+0x48>
 800080c:	e01d      	b.n	800084a <getStopBits+0x66>

			case UART_STOPBITS_1: {

				strcat ((char*) buff, (str_cast)"1 bits");
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fcec 	bl	80001ec <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	4a15      	ldr	r2, [pc, #84]	; (8000874 <getStopBits+0x90>)
 800081e:	6810      	ldr	r0, [r2, #0]
 8000820:	6018      	str	r0, [r3, #0]
 8000822:	8891      	ldrh	r1, [r2, #4]
 8000824:	7992      	ldrb	r2, [r2, #6]
 8000826:	8099      	strh	r1, [r3, #4]
 8000828:	719a      	strb	r2, [r3, #6]
				break;
 800082a:	e01c      	b.n	8000866 <getStopBits+0x82>

			}

			case UART_STOPBITS_2: {

				strcat ((char*) buff, (str_cast)"2 bits");
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fcdd 	bl	80001ec <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <getStopBits+0x94>)
 800083c:	6810      	ldr	r0, [r2, #0]
 800083e:	6018      	str	r0, [r3, #0]
 8000840:	8891      	ldrh	r1, [r2, #4]
 8000842:	7992      	ldrb	r2, [r2, #6]
 8000844:	8099      	strh	r1, [r3, #4]
 8000846:	719a      	strb	r2, [r3, #6]
				break;
 8000848:	e00d      	b.n	8000866 <getStopBits+0x82>

			}

			default: {

				strcat ((char*) buff, (str_cast)"unknown");
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fcce 	bl	80001ec <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	4908      	ldr	r1, [pc, #32]	; (800087c <getStopBits+0x98>)
 800085a:	461a      	mov	r2, r3
 800085c:	460b      	mov	r3, r1
 800085e:	cb03      	ldmia	r3!, {r0, r1}
 8000860:	6010      	str	r0, [r2, #0]
 8000862:	6051      	str	r1, [r2, #4]
				break;
 8000864:	bf00      	nop

		}

	}

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000048 	.word	0x20000048
 8000874:	08002b6c 	.word	0x08002b6c
 8000878:	08002b74 	.word	0x08002b74
 800087c:	08002b64 	.word	0x08002b64

08000880 <getWordLen>:
 *
 * @param buff: Temporary conversion buffer
 *
 * @return None
 */
static void getWordLen (uint8_t* buff) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	if (buff != NULL) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d039      	beq.n	8000902 <getWordLen+0x82>

		memset(buff, CLEAN_CHARACTER, LEN_TMP_MSG);
 800088e:	2300      	movs	r3, #0
 8000890:	220a      	movs	r2, #10
 8000892:	4619      	mov	r1, r3
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f002 f913 	bl	8002ac0 <memset>

		switch (huart3.Init.WordLength) {
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <getWordLen+0x8c>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <getWordLen+0x2a>
 80008a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008a6:	d00f      	beq.n	80008c8 <getWordLen+0x48>
 80008a8:	e01d      	b.n	80008e6 <getWordLen+0x66>

			case UART_WORDLENGTH_8B: {

				strcat ((char*) buff, (str_cast)"8 bits");
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc9e 	bl	80001ec <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <getWordLen+0x90>)
 80008ba:	6810      	ldr	r0, [r2, #0]
 80008bc:	6018      	str	r0, [r3, #0]
 80008be:	8891      	ldrh	r1, [r2, #4]
 80008c0:	7992      	ldrb	r2, [r2, #6]
 80008c2:	8099      	strh	r1, [r3, #4]
 80008c4:	719a      	strb	r2, [r3, #6]
				break;
 80008c6:	e01c      	b.n	8000902 <getWordLen+0x82>

			}

			case UART_WORDLENGTH_9B: {

				strcat ((char*) buff, (str_cast)"9 bits");
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fc8f 	bl	80001ec <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <getWordLen+0x94>)
 80008d8:	6810      	ldr	r0, [r2, #0]
 80008da:	6018      	str	r0, [r3, #0]
 80008dc:	8891      	ldrh	r1, [r2, #4]
 80008de:	7992      	ldrb	r2, [r2, #6]
 80008e0:	8099      	strh	r1, [r3, #4]
 80008e2:	719a      	strb	r2, [r3, #6]
				break;
 80008e4:	e00d      	b.n	8000902 <getWordLen+0x82>

			}

			default: {

				strcat ((char*) buff, (str_cast)"unknown");
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fc80 	bl	80001ec <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	4908      	ldr	r1, [pc, #32]	; (8000918 <getWordLen+0x98>)
 80008f6:	461a      	mov	r2, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	cb03      	ldmia	r3!, {r0, r1}
 80008fc:	6010      	str	r0, [r2, #0]
 80008fe:	6051      	str	r1, [r2, #4]
				break;
 8000900:	bf00      	nop

		}

	}

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000048 	.word	0x20000048
 8000910:	08002b7c 	.word	0x08002b7c
 8000914:	08002b84 	.word	0x08002b84
 8000918:	08002b64 	.word	0x08002b64

0800091c <getUartInstance>:
 *
 * @param buff: Temporary conversion buffer
 *
 * @return None
 */
static void getUartInstance (uint8_t* buff) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	if (buff != NULL) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d04a      	beq.n	80009c0 <getUartInstance+0xa4>

		memset(buff, CLEAN_CHARACTER, LEN_TMP_MSG);
 800092a:	2300      	movs	r3, #0
 800092c:	220a      	movs	r2, #10
 800092e:	4619      	mov	r1, r3
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f002 f8c5 	bl	8002ac0 <memset>

		if 		(huart3.Instance == USART1)
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <getUartInstance+0xac>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <getUartInstance+0xb0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d10c      	bne.n	800095a <getUartInstance+0x3e>
			strcat ((char*) buff, (str_cast)"UART1");
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fc53 	bl	80001ec <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <getUartInstance+0xb4>)
 8000950:	6810      	ldr	r0, [r2, #0]
 8000952:	6018      	str	r0, [r3, #0]
 8000954:	8892      	ldrh	r2, [r2, #4]
 8000956:	809a      	strh	r2, [r3, #4]

		else
			strcat ((char*) buff, (str_cast)"_unknown");
	}

}
 8000958:	e032      	b.n	80009c0 <getUartInstance+0xa4>
		else if (huart3.Instance == USART2)
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <getUartInstance+0xac>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <getUartInstance+0xb8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d10c      	bne.n	800097e <getUartInstance+0x62>
			strcat ((char*) buff, (str_cast)"UART2");
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fc41 	bl	80001ec <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <getUartInstance+0xbc>)
 8000974:	6810      	ldr	r0, [r2, #0]
 8000976:	6018      	str	r0, [r3, #0]
 8000978:	8892      	ldrh	r2, [r2, #4]
 800097a:	809a      	strh	r2, [r3, #4]
}
 800097c:	e020      	b.n	80009c0 <getUartInstance+0xa4>
		else if (huart3.Instance == USART3)
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <getUartInstance+0xac>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <getUartInstance+0xc0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d10c      	bne.n	80009a2 <getUartInstance+0x86>
			strcat ((char*) buff, (str_cast)"UART3");
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc2f 	bl	80001ec <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <getUartInstance+0xc4>)
 8000998:	6810      	ldr	r0, [r2, #0]
 800099a:	6018      	str	r0, [r3, #0]
 800099c:	8892      	ldrh	r2, [r2, #4]
 800099e:	809a      	strh	r2, [r3, #4]
}
 80009a0:	e00e      	b.n	80009c0 <getUartInstance+0xa4>
			strcat ((char*) buff, (str_cast)"_unknown");
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fc22 	bl	80001ec <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	490c      	ldr	r1, [pc, #48]	; (80009e4 <getUartInstance+0xc8>)
 80009b2:	461a      	mov	r2, r3
 80009b4:	460b      	mov	r3, r1
 80009b6:	cb03      	ldmia	r3!, {r0, r1}
 80009b8:	6010      	str	r0, [r2, #0]
 80009ba:	6051      	str	r1, [r2, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	7213      	strb	r3, [r2, #8]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000048 	.word	0x20000048
 80009cc:	40011000 	.word	0x40011000
 80009d0:	08002b8c 	.word	0x08002b8c
 80009d4:	40004400 	.word	0x40004400
 80009d8:	08002b94 	.word	0x08002b94
 80009dc:	40004800 	.word	0x40004800
 80009e0:	08002b9c 	.word	0x08002b9c
 80009e4:	08002ba4 	.word	0x08002ba4

080009e8 <createInitMessage>:
 *
 * @param buff: Conversion buffer
 *
 * @return None
 */
static void createInitMessage (uint8_t* buffer) {
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

	uint8_t tmpMsg [LEN_TMP_MSG] = { CLEAN_CHARACTER };
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	811a      	strh	r2, [r3, #8]
 80009fc:	2300      	movs	r3, #0
 80009fe:	733b      	strb	r3, [r7, #12]

	memset(buffer, CLEAN_CHARACTER, LEN_INIT_MSG);
 8000a00:	2300      	movs	r3, #0
 8000a02:	2278      	movs	r2, #120	; 0x78
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f002 f85a 	bl	8002ac0 <memset>

	/* Header init msg */
	strcat ((char*)buffer, (str_cast)INIT_HEADER_MSG);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fbed 	bl	80001ec <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <createInitMessage+0x174>)
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	4614      	mov	r4, r2
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	6028      	str	r0, [r5, #0]
 8000a24:	6069      	str	r1, [r5, #4]
 8000a26:	60aa      	str	r2, [r5, #8]
 8000a28:	60eb      	str	r3, [r5, #12]
 8000a2a:	8823      	ldrh	r3, [r4, #0]
 8000a2c:	822b      	strh	r3, [r5, #16]

	/* Instance uart data */
	strcat ((char*)buffer, (str_cast)INIT_INSTANCE_MSG);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fbdc 	bl	80001ec <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4948      	ldr	r1, [pc, #288]	; (8000b60 <createInitMessage+0x178>)
 8000a3e:	461a      	mov	r2, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	cb03      	ldmia	r3!, {r0, r1}
 8000a44:	6010      	str	r0, [r2, #0]
 8000a46:	6051      	str	r1, [r2, #4]
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	8113      	strh	r3, [r2, #8]
	getUartInstance (tmpMsg);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff63 	bl	800091c <getUartInstance>
	strcat ((char*)buffer, (str_cast)tmpMsg);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f002 f837 	bl	8002ad0 <strcat>

	/* BaudRate uart data */
	strcat ((char*)buffer, (str_cast)INIT_BAUD_MSG);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fbc2 	bl	80001ec <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a3c      	ldr	r2, [pc, #240]	; (8000b64 <createInitMessage+0x17c>)
 8000a72:	461c      	mov	r4, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a78:	6020      	str	r0, [r4, #0]
 8000a7a:	6061      	str	r1, [r4, #4]
 8000a7c:	60a2      	str	r2, [r4, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	7323      	strb	r3, [r4, #12]
	itoa (huart3.Init.BaudRate, (char*)tmpMsg, NUMERIC_BASE);
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <createInitMessage+0x180>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f001 ffd1 	bl	8002a36 <itoa>
	strcat ((char*)buffer, (str_cast)tmpMsg);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f002 f818 	bl	8002ad0 <strcat>

	/* WordLen uart data */
	strcat ((char*)buffer, (str_cast)INIT_WORD_LEN_MSG);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fba3 	bl	80001ec <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <createInitMessage+0x184>)
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ab6:	6020      	str	r0, [r4, #0]
 8000ab8:	6061      	str	r1, [r4, #4]
 8000aba:	60a2      	str	r2, [r4, #8]
	getWordLen(tmpMsg);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fedd 	bl	8000880 <getWordLen>
	strcat ((char*)buffer, (str_cast)tmpMsg);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f001 ffff 	bl	8002ad0 <strcat>

	/* StopBits uart data */
	strcat ((char*)buffer, (str_cast)INIT_STOP_BITS_MSG);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fb8a 	bl	80001ec <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <createInitMessage+0x188>)
 8000ae2:	461c      	mov	r4, r3
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ae8:	6020      	str	r0, [r4, #0]
 8000aea:	6061      	str	r1, [r4, #4]
 8000aec:	60a2      	str	r2, [r4, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	7323      	strb	r3, [r4, #12]
	getStopBits(tmpMsg);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe74 	bl	80007e4 <getStopBits>
	strcat ((char*)buffer, (str_cast)tmpMsg);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 ffe4 	bl	8002ad0 <strcat>

	/* Parity uart data */
	strcat ((char*)buffer, (str_cast)INIT_PARITY_MSG);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fb6f 	bl	80001ec <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4917      	ldr	r1, [pc, #92]	; (8000b74 <createInitMessage+0x18c>)
 8000b18:	461a      	mov	r2, r3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	cb03      	ldmia	r3!, {r0, r1}
 8000b1e:	6010      	str	r0, [r2, #0]
 8000b20:	6051      	str	r1, [r2, #4]
 8000b22:	8819      	ldrh	r1, [r3, #0]
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	8111      	strh	r1, [r2, #8]
 8000b28:	7293      	strb	r3, [r2, #10]
	getParity(tmpMsg);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fdfc 	bl	800072c <getParity>
	strcat ((char*)buffer, (str_cast)tmpMsg);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f001 ffc8 	bl	8002ad0 <strcat>

	/* End init uart msg */
	strcat ((char*)buffer, (str_cast)INIT_END_MSG);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fb53 	bl	80001ec <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <createInitMessage+0x190>)
 8000b50:	6810      	ldr	r0, [r2, #0]
 8000b52:	6018      	str	r0, [r3, #0]

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	08002c08 	.word	0x08002c08
 8000b60:	08002c1c 	.word	0x08002c1c
 8000b64:	08002c28 	.word	0x08002c28
 8000b68:	20000048 	.word	0x20000048
 8000b6c:	08002c38 	.word	0x08002c38
 8000b70:	08002c44 	.word	0x08002c44
 8000b74:	08002c54 	.word	0x08002c54
 8000b78:	08002c60 	.word	0x08002c60

08000b7c <API_uartInit>:
 *
 * @param None
 *
 * @return None
 */
bool_t API_uartInit (void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0a0      	sub	sp, #128	; 0x80
 8000b80:	af00      	add	r7, sp, #0

	uint8_t buffer[LEN_INIT_MSG] = { CLEAN_CHARACTER };
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2278      	movs	r2, #120	; 0x78
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 ff99 	bl	8002ac0 <memset>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	713b      	strb	r3, [r7, #4]
	bool_t configurationSuccessful = false;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	/* Main config */
	huart3.Instance = UART_INSTANCE;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <API_uartInit+0x88>)
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <API_uartInit+0x8c>)
 8000b9c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = UART_BAUD_RATE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <API_uartInit+0x88>)
 8000ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORD_LEN;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <API_uartInit+0x88>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOP_BITS;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <API_uartInit+0x88>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <API_uartInit+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]

	/* Config no interesting */
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <API_uartInit+0x88>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <API_uartInit+0x88>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <API_uartInit+0x88>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]

	configurationSuccessful = (HAL_UART_Init (&huart3) == HAL_OK);
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <API_uartInit+0x88>)
 8000bcc:	f001 fa42 	bl	8002054 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	/*
	 * This message is only sent if the configuration
	 * was successful
	 */
	if (configurationSuccessful) {
 8000bde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <API_uartInit+0x7a>

		createInitMessage(buffer);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fefd 	bl	80009e8 <createInitMessage>

		API_uartSendString(buffer);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f80b 	bl	8000c0c <API_uartSendString>

	}

	return configurationSuccessful;
 8000bf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3780      	adds	r7, #128	; 0x80
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000048 	.word	0x20000048
 8000c08:	40004800 	.word	0x40004800

08000c0c <API_uartSendString>:
 *
 * @param pstring: String to print
 *
 * @return None
 */
void API_uartSendString (uint8_t* pstring) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	if (pstring != NULL) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <API_uartSendString+0x26>

		uint16_t len = (uint16_t) strlen ((str_cast) pstring);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae6 	bl	80001ec <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	81fb      	strh	r3, [r7, #14]

		HAL_UART_Transmit (&huart3, pstring, len, MAX_WAIT_UART_TX);
 8000c24:	89fa      	ldrh	r2, [r7, #14]
 8000c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <API_uartSendString+0x30>)
 8000c2e:	f001 fa5e 	bl	80020ee <HAL_UART_Transmit>

	}

}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000048 	.word	0x20000048

08000c40 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10e      	bne.n	8000c6e <BSP_LED_Init+0x2e>
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	e00d      	b.n	8000c8a <BSP_LED_Init+0x4a>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <BSP_LED_Init+0x94>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <BSP_LED_Init+0x98>)
 8000c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <BSP_LED_Init+0x9c>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	f107 0214 	add.w	r2, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 faa0 	bl	80011f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <BSP_LED_Init+0x9c>)
 8000cb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <BSP_LED_Init+0x98>)
 8000cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f000 fc58 	bl	800157c <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	08002c64 	.word	0x08002c64
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <BSP_LED_On+0x2c>)
 8000cee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <BSP_LED_On+0x30>)
 8000cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f000 fc3d 	bl	800157c <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	08002c64 	.word	0x08002c64

08000d14 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <BSP_LED_Toggle+0x2c>)
 8000d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <BSP_LED_Toggle+0x30>)
 8000d2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4610      	mov	r0, r2
 8000d32:	f000 fc3c 	bl	80015ae <HAL_GPIO_TogglePin>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000000 	.word	0x20000000
 8000d44:	08002c64 	.word	0x08002c64

08000d48 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <BSP_PB_Init+0xa4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <BSP_PB_Init+0xa4>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <BSP_PB_Init+0xa4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d112      	bne.n	8000da0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <BSP_PB_Init+0xa8>)
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	f107 020c 	add.w	r2, r7, #12
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fa2a 	bl	80011f4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d11d      	bne.n	8000de2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000db0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <BSP_PB_Init+0xa8>)
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	f107 020c 	add.w	r2, r7, #12
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fa15 	bl	80011f4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000dca:	2328      	movs	r3, #40	; 0x28
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f9d7 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000dd8:	2328      	movs	r3, #40	; 0x28
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f9ee 	bl	80011be <HAL_NVIC_EnableIRQ>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <BSP_PB_GetState+0x28>)
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb9d 	bl	800154c <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000000c 	.word	0x2000000c

08000e20 <BSP_GetCurrentTime>:
  * @brief Provides a tick value in millisecond.
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
uint32_t BSP_GetCurrentTime (void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

	return HAL_GetTick ();
 8000e24:	f000 f8c8 	bl	8000fb8 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0

}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <SystemInit+0x60>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <SystemInit+0x60>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <SystemInit+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <SystemInit+0x64>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <SystemInit+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <SystemInit+0x64>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <SystemInit+0x64>)
 8000e5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <SystemInit+0x64>)
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <SystemInit+0x68>)
 8000e6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <SystemInit+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <SystemInit+0x64>)
 8000e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SystemInit+0x60>)
 8000e80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e84:	609a      	str	r2, [r3, #8]
#endif
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	24003010 	.word	0x24003010

08000e9c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ef0:	f000 f84e 	bl	8000f90 <HAL_IncTick>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x34>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x34>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x34>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x34>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f92b 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f000 fba8 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f943 	bl	80011da <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f000 f90b 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000010 	.word	0x20000010
 8000f88:	20000018 	.word	0x20000018
 8000f8c:	20000014 	.word	0x20000014

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000018 	.word	0x20000018
 8000fb4:	2000008c 	.word	0x2000008c

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000008c 	.word	0x2000008c

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff3e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff31 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e177      	b.n	8001500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8166 	bne.w	80014fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80c0 	beq.w	80014fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_GPIO_Init+0x324>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a61      	ldr	r2, [pc, #388]	; (800151c <HAL_GPIO_Init+0x328>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d037      	beq.n	8001432 <HAL_GPIO_Init+0x23e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d031      	beq.n	800142e <HAL_GPIO_Init+0x23a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a56      	ldr	r2, [pc, #344]	; (8001528 <HAL_GPIO_Init+0x334>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x236>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a55      	ldr	r2, [pc, #340]	; (800152c <HAL_GPIO_Init+0x338>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x232>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x33c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a53      	ldr	r2, [pc, #332]	; (8001534 <HAL_GPIO_Init+0x340>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x22a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_Init+0x344>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a51      	ldr	r2, [pc, #324]	; (800153c <HAL_GPIO_Init+0x348>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <HAL_GPIO_Init+0x34c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x21a>
 800140a:	2309      	movs	r3, #9
 800140c:	e012      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800140e:	230a      	movs	r3, #10
 8001410:	e010      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001412:	2308      	movs	r3, #8
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001416:	2307      	movs	r3, #7
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x328>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_GPIO_Init+0x354>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_GPIO_Init+0x354>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_GPIO_Init+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_GPIO_Init+0x354>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_GPIO_Init+0x354>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_GPIO_Init+0x354>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_GPIO_Init+0x354>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <HAL_GPIO_Init+0x354>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae84 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40022000 	.word	0x40022000
 8001544:	40022400 	.word	0x40022400
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001598:	e003      	b.n	80015a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	041a      	lsls	r2, r3, #16
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	400b      	ands	r3, r1
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART3) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_UART_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12c      	bne.n	8001660 <HAL_UART_MspInit+0x7c>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x88>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_UART_MspInit+0x88>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800163e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001642:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001650:	2307      	movs	r3, #7
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0x8c>)
 800165c:	f7ff fdca 	bl	80011f4 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40004800 	.word	0x40004800
 800166c:	40023800 	.word	0x40023800
 8001670:	40020c00 	.word	0x40020c00

08001674 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_EnableOverDrive+0x90>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_PWREx_EnableOverDrive+0x94>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff fc82 	bl	8000fb8 <HAL_GetTick>
 80016b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016b6:	e009      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016b8:	f7ff fc7e 	bl	8000fb8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c6:	d901      	bls.n	80016cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e01f      	b.n	800170c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_PWREx_EnableOverDrive+0x98>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d1ee      	bne.n	80016b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e0:	f7ff fc6a 	bl	8000fb8 <HAL_GetTick>
 80016e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016e6:	e009      	b.n	80016fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016e8:	f7ff fc66 	bl	8000fb8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f6:	d901      	bls.n	80016fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e007      	b.n	800170c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_EnableOverDrive+0x98>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001708:	d1ee      	bne.n	80016e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	420e0040 	.word	0x420e0040
 800171c:	40007000 	.word	0x40007000
 8001720:	420e0044 	.word	0x420e0044

08001724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e267      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d075      	beq.n	800182e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00c      	beq.n	8001768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001756:	2b08      	cmp	r3, #8
 8001758:	d112      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001766:	d10b      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d05b      	beq.n	800182c <HAL_RCC_OscConfig+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d157      	bne.n	800182c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e242      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x74>
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xb0>
 80017bc:	4b69      	ldr	r3, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fbec 	bl	8000fb8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fbe8 	bl	8000fb8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e207      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xc0>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fbd8 	bl	8000fb8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fbd4 	bl	8000fb8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1f3      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0xe8>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c7      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fb8d 	bl	8000fb8 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fb89 	bl	8000fb8 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a8      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x244>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb6c 	bl	8000fb8 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fb68 	bl	8000fb8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e187      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb4c 	bl	8000fb8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fb48 	bl	8000fb8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e167      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x240>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x200>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x248>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb35 	bl	8000fb8 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fb31 	bl	8000fb8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e150      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8097 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a7c      	ldr	r2, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff faf1 	bl	8000fb8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff faed 	bl	8000fb8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e10c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x474>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x30c>
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x324>
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fab2 	bl	8000fb8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff faae 	bl	8000fb8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0cb      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ee      	beq.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa9c 	bl	8000fb8 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fa98 	bl	8000fb8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0b5      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a1 	beq.w	8001c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d05c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d141      	bne.n	8001b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa6c 	bl	8000fb8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fa68 	bl	8000fb8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e087      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa41 	bl	8000fb8 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fa3d 	bl	8000fb8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x416>
 8001b58:	e054      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x478>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa2a 	bl	8000fb8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa26 	bl	8000fb8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e045      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
 8001b86:	e03d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e038      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4ec>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cc      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d90c      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e067      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f958 	bl	8000fb8 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f954 	bl	8000fb8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d20c      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f8b8 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08002c6c 	.word	0x08002c6c
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	20000014 	.word	0x20000014

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b094      	sub	sp, #80	; 0x50
 8001de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df0:	2300      	movs	r3, #0
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x40>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f200 80e1 	bhi.w	8001fcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e12:	e0db      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e18:	e0db      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1e:	e0d8      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e52:	4622      	mov	r2, r4
 8001e54:	462b      	mov	r3, r5
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e64:	0150      	lsls	r0, r2, #5
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	1a51      	subs	r1, r2, r1
 8001e6e:	6139      	str	r1, [r7, #16]
 8001e70:	4629      	mov	r1, r5
 8001e72:	eb63 0301 	sbc.w	r3, r3, r1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e84:	4659      	mov	r1, fp
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8e:	4651      	mov	r1, sl
 8001e90:	018a      	lsls	r2, r1, #6
 8001e92:	4651      	mov	r1, sl
 8001e94:	ebb2 0801 	subs.w	r8, r2, r1
 8001e98:	4659      	mov	r1, fp
 8001e9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb2:	4690      	mov	r8, r2
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	eb18 0303 	adds.w	r3, r8, r3
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	eb49 0303 	adc.w	r3, r9, r3
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	024b      	lsls	r3, r1, #9
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001edc:	4621      	mov	r1, r4
 8001ede:	024a      	lsls	r2, r1, #9
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef0:	f7fe f984 	bl	80001fc <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001efc:	e058      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	2200      	movs	r2, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	4611      	mov	r1, r2
 8001f0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f18:	4642      	mov	r2, r8
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0159      	lsls	r1, r3, #5
 8001f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2a:	0150      	lsls	r0, r2, #5
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4641      	mov	r1, r8
 8001f32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f36:	4649      	mov	r1, r9
 8001f38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f50:	ebb2 040a 	subs.w	r4, r2, sl
 8001f54:	eb63 050b 	sbc.w	r5, r3, fp
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	00eb      	lsls	r3, r5, #3
 8001f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f66:	00e2      	lsls	r2, r4, #3
 8001f68:	4614      	mov	r4, r2
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	18e3      	adds	r3, r4, r3
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	464b      	mov	r3, r9
 8001f74:	eb45 0303 	adc.w	r3, r5, r3
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f86:	4629      	mov	r1, r5
 8001f88:	028b      	lsls	r3, r1, #10
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f90:	4621      	mov	r1, r4
 8001f92:	028a      	lsls	r2, r1, #10
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	61fa      	str	r2, [r7, #28]
 8001fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa4:	f7fe f92a 	bl	80001fc <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000010 	.word	0x20000010

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08002c7c 	.word	0x08002c7c

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffdc 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08002c7c 	.word	0x08002c7c

08002054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e03f      	b.n	80020e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fab2 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	; 0x24
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f929 	bl	80022f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b08a      	sub	sp, #40	; 0x28
 80020f2:	af02      	add	r7, sp, #8
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d17c      	bne.n	8002208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_UART_Transmit+0x2c>
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e075      	b.n	800220a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_UART_Transmit+0x3e>
 8002128:	2302      	movs	r3, #2
 800212a:	e06e      	b.n	800220a <HAL_UART_Transmit+0x11c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002142:	f7fe ff39 	bl	8000fb8 <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215c:	d108      	bne.n	8002170 <HAL_UART_Transmit+0x82>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	e003      	b.n	8002178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002180:	e02a      	b.n	80021d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f840 	bl	8002212 <UART_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e036      	b.n	800220a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	3302      	adds	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e007      	b.n	80021ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3301      	adds	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1cf      	bne.n	8002182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f810 	bl	8002212 <UART_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b090      	sub	sp, #64	; 0x40
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002222:	e050      	b.n	80022c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222a:	d04c      	beq.n	80022c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <UART_WaitOnFlagUntilTimeout+0x30>
 8002232:	f7fe fec1 	bl	8000fb8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800223e:	429a      	cmp	r2, r3
 8002240:	d241      	bcs.n	80022c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002262:	637a      	str	r2, [r7, #52]	; 0x34
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226a:	e841 2300 	strex	r3, r2, [r1]
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e5      	bne.n	8002242 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3314      	adds	r3, #20
 800227c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	613b      	str	r3, [r7, #16]
   return(result);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3314      	adds	r3, #20
 8002294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002296:	623a      	str	r2, [r7, #32]
 8002298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229a:	69f9      	ldr	r1, [r7, #28]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e5      	bne.n	8002276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e00f      	b.n	80022e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d09f      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3740      	adds	r7, #64	; 0x40
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b0c0      	sub	sp, #256	; 0x100
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	ea40 0301 	orr.w	r3, r0, r1
 8002318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	431a      	orrs	r2, r3
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	431a      	orrs	r2, r3
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002348:	f021 010c 	bic.w	r1, r1, #12
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002356:	430b      	orrs	r3, r1
 8002358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	6999      	ldr	r1, [r3, #24]
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	ea40 0301 	orr.w	r3, r0, r1
 8002376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <UART_SetConfig+0x2cc>)
 8002380:	429a      	cmp	r2, r3
 8002382:	d005      	beq.n	8002390 <UART_SetConfig+0xa0>
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <UART_SetConfig+0x2d0>)
 800238c:	429a      	cmp	r2, r3
 800238e:	d104      	bne.n	800239a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff fe4c 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002394:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002398:	e003      	b.n	80023a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800239a:	f7ff fe33 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 800239e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ac:	f040 810c 	bne.w	80025c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023c2:	4622      	mov	r2, r4
 80023c4:	462b      	mov	r3, r5
 80023c6:	1891      	adds	r1, r2, r2
 80023c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80023ca:	415b      	adcs	r3, r3
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023d2:	4621      	mov	r1, r4
 80023d4:	eb12 0801 	adds.w	r8, r2, r1
 80023d8:	4629      	mov	r1, r5
 80023da:	eb43 0901 	adc.w	r9, r3, r1
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f2:	4690      	mov	r8, r2
 80023f4:	4699      	mov	r9, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	eb18 0303 	adds.w	r3, r8, r3
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002400:	462b      	mov	r3, r5
 8002402:	eb49 0303 	adc.w	r3, r9, r3
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800240a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002416:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800241a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800241e:	460b      	mov	r3, r1
 8002420:	18db      	adds	r3, r3, r3
 8002422:	653b      	str	r3, [r7, #80]	; 0x50
 8002424:	4613      	mov	r3, r2
 8002426:	eb42 0303 	adc.w	r3, r2, r3
 800242a:	657b      	str	r3, [r7, #84]	; 0x54
 800242c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002434:	f7fd fee2 	bl	80001fc <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <UART_SetConfig+0x2d4>)
 800243e:	fba3 2302 	umull	r2, r3, r3, r2
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	011c      	lsls	r4, r3, #4
 8002446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002450:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002458:	4642      	mov	r2, r8
 800245a:	464b      	mov	r3, r9
 800245c:	1891      	adds	r1, r2, r2
 800245e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002460:	415b      	adcs	r3, r3
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002468:	4641      	mov	r1, r8
 800246a:	eb12 0a01 	adds.w	sl, r2, r1
 800246e:	4649      	mov	r1, r9
 8002470:	eb43 0b01 	adc.w	fp, r3, r1
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002488:	4692      	mov	sl, r2
 800248a:	469b      	mov	fp, r3
 800248c:	4643      	mov	r3, r8
 800248e:	eb1a 0303 	adds.w	r3, sl, r3
 8002492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002496:	464b      	mov	r3, r9
 8002498:	eb4b 0303 	adc.w	r3, fp, r3
 800249c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024b4:	460b      	mov	r3, r1
 80024b6:	18db      	adds	r3, r3, r3
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ba:	4613      	mov	r3, r2
 80024bc:	eb42 0303 	adc.w	r3, r2, r3
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
 80024c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024ca:	f7fd fe97 	bl	80001fc <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <UART_SetConfig+0x2d4>)
 80024d6:	fba3 2301 	umull	r2, r3, r3, r1
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2264      	movs	r2, #100	; 0x64
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	1acb      	subs	r3, r1, r3
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <UART_SetConfig+0x2d4>)
 80024ec:	fba3 2302 	umull	r2, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024f8:	441c      	add	r4, r3
 80024fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002504:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	1891      	adds	r1, r2, r2
 8002512:	63b9      	str	r1, [r7, #56]	; 0x38
 8002514:	415b      	adcs	r3, r3
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800251c:	4641      	mov	r1, r8
 800251e:	1851      	adds	r1, r2, r1
 8002520:	6339      	str	r1, [r7, #48]	; 0x30
 8002522:	4649      	mov	r1, r9
 8002524:	414b      	adcs	r3, r1
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002534:	4659      	mov	r1, fp
 8002536:	00cb      	lsls	r3, r1, #3
 8002538:	4651      	mov	r1, sl
 800253a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253e:	4651      	mov	r1, sl
 8002540:	00ca      	lsls	r2, r1, #3
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4603      	mov	r3, r0
 8002548:	4642      	mov	r2, r8
 800254a:	189b      	adds	r3, r3, r2
 800254c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002550:	464b      	mov	r3, r9
 8002552:	460a      	mov	r2, r1
 8002554:	eb42 0303 	adc.w	r3, r2, r3
 8002558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002568:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800256c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002570:	460b      	mov	r3, r1
 8002572:	18db      	adds	r3, r3, r3
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
 8002576:	4613      	mov	r3, r2
 8002578:	eb42 0303 	adc.w	r3, r2, r3
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002586:	f7fd fe39 	bl	80001fc <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <UART_SetConfig+0x2d4>)
 8002590:	fba3 1302 	umull	r1, r3, r3, r2
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	2164      	movs	r1, #100	; 0x64
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	3332      	adds	r3, #50	; 0x32
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <UART_SetConfig+0x2d4>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	f003 0207 	and.w	r2, r3, #7
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4422      	add	r2, r4
 80025b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025b8:	e106      	b.n	80027c8 <UART_SetConfig+0x4d8>
 80025ba:	bf00      	nop
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40011400 	.word	0x40011400
 80025c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025cc:	2200      	movs	r2, #0
 80025ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025da:	4642      	mov	r2, r8
 80025dc:	464b      	mov	r3, r9
 80025de:	1891      	adds	r1, r2, r2
 80025e0:	6239      	str	r1, [r7, #32]
 80025e2:	415b      	adcs	r3, r3
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ea:	4641      	mov	r1, r8
 80025ec:	1854      	adds	r4, r2, r1
 80025ee:	4649      	mov	r1, r9
 80025f0:	eb43 0501 	adc.w	r5, r3, r1
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	00eb      	lsls	r3, r5, #3
 80025fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002602:	00e2      	lsls	r2, r4, #3
 8002604:	4614      	mov	r4, r2
 8002606:	461d      	mov	r5, r3
 8002608:	4643      	mov	r3, r8
 800260a:	18e3      	adds	r3, r4, r3
 800260c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002610:	464b      	mov	r3, r9
 8002612:	eb45 0303 	adc.w	r3, r5, r3
 8002616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002636:	4629      	mov	r1, r5
 8002638:	008b      	lsls	r3, r1, #2
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002640:	4621      	mov	r1, r4
 8002642:	008a      	lsls	r2, r1, #2
 8002644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002648:	f7fd fdd8 	bl	80001fc <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <UART_SetConfig+0x4e4>)
 8002652:	fba3 2302 	umull	r2, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	011c      	lsls	r4, r3, #4
 800265a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800266c:	4642      	mov	r2, r8
 800266e:	464b      	mov	r3, r9
 8002670:	1891      	adds	r1, r2, r2
 8002672:	61b9      	str	r1, [r7, #24]
 8002674:	415b      	adcs	r3, r3
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267c:	4641      	mov	r1, r8
 800267e:	1851      	adds	r1, r2, r1
 8002680:	6139      	str	r1, [r7, #16]
 8002682:	4649      	mov	r1, r9
 8002684:	414b      	adcs	r3, r1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002694:	4659      	mov	r1, fp
 8002696:	00cb      	lsls	r3, r1, #3
 8002698:	4651      	mov	r1, sl
 800269a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269e:	4651      	mov	r1, sl
 80026a0:	00ca      	lsls	r2, r1, #3
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	4642      	mov	r2, r8
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026b0:	464b      	mov	r3, r9
 80026b2:	460a      	mov	r2, r1
 80026b4:	eb42 0303 	adc.w	r3, r2, r3
 80026b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026d4:	4649      	mov	r1, r9
 80026d6:	008b      	lsls	r3, r1, #2
 80026d8:	4641      	mov	r1, r8
 80026da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026de:	4641      	mov	r1, r8
 80026e0:	008a      	lsls	r2, r1, #2
 80026e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026e6:	f7fd fd89 	bl	80001fc <__aeabi_uldivmod>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <UART_SetConfig+0x4e4>)
 80026f2:	fba3 2301 	umull	r2, r3, r3, r1
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2264      	movs	r2, #100	; 0x64
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	1acb      	subs	r3, r1, r3
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	3332      	adds	r3, #50	; 0x32
 8002704:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <UART_SetConfig+0x4e4>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002710:	441c      	add	r4, r3
 8002712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002716:	2200      	movs	r2, #0
 8002718:	673b      	str	r3, [r7, #112]	; 0x70
 800271a:	677a      	str	r2, [r7, #116]	; 0x74
 800271c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	1891      	adds	r1, r2, r2
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	415b      	adcs	r3, r3
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002730:	4641      	mov	r1, r8
 8002732:	1851      	adds	r1, r2, r1
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	4649      	mov	r1, r9
 8002738:	414b      	adcs	r3, r1
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002748:	4659      	mov	r1, fp
 800274a:	00cb      	lsls	r3, r1, #3
 800274c:	4651      	mov	r1, sl
 800274e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002752:	4651      	mov	r1, sl
 8002754:	00ca      	lsls	r2, r1, #3
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	4603      	mov	r3, r0
 800275c:	4642      	mov	r2, r8
 800275e:	189b      	adds	r3, r3, r2
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
 8002762:	464b      	mov	r3, r9
 8002764:	460a      	mov	r2, r1
 8002766:	eb42 0303 	adc.w	r3, r2, r3
 800276a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
 8002776:	667a      	str	r2, [r7, #100]	; 0x64
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002784:	4649      	mov	r1, r9
 8002786:	008b      	lsls	r3, r1, #2
 8002788:	4641      	mov	r1, r8
 800278a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800278e:	4641      	mov	r1, r8
 8002790:	008a      	lsls	r2, r1, #2
 8002792:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002796:	f7fd fd31 	bl	80001fc <__aeabi_uldivmod>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <UART_SetConfig+0x4e4>)
 80027a0:	fba3 1302 	umull	r1, r3, r3, r2
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	2164      	movs	r1, #100	; 0x64
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	3332      	adds	r3, #50	; 0x32
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <UART_SetConfig+0x4e4>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	f003 020f 	and.w	r2, r3, #15
 80027be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4422      	add	r2, r4
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027ce:	46bd      	mov	sp, r7
 80027d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d4:	51eb851f 	.word	0x51eb851f

080027d8 <main>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main (void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0

	HAL_Init ();
 80027de:	f7fe fb8b 	bl	8000ef8 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config ();
 80027e2:	f000 f87f 	bl	80028e4 <SystemClock_Config>

	while (!API_uartInit ());
 80027e6:	bf00      	nop
 80027e8:	f7fe f9c8 	bl	8000b7c <API_uartInit>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f083 0301 	eor.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f7      	bne.n	80027e8 <main+0x10>

	delay_t delayLed = {};
 80027f8:	463b      	mov	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]

	/* Initializes the LED1 delay structure */
	API_delayInit(&delayLed, FREQUENCY_05HZ);
 8002802:	463b      	mov	r3, r7
 8002804:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd ff33 	bl	8000674 <API_delayInit>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init (LED1);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe fa16 	bl	8000c40 <BSP_LED_Init>

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init (BUTTON_USER, BUTTON_MODE_GPIO);
 8002814:	2100      	movs	r1, #0
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe fa96 	bl	8000d48 <BSP_PB_Init>

	/* Initialize the state machine */
	API_debounceFsmInit ();
 800281c:	f7fd fe98 	bl	8000550 <API_debounceFsmInit>

	/* Infinite loop */
	while (1) {

		API_debounceFsmUpdate ();
 8002820:	f7fd fea6 	bl	8000570 <API_debounceFsmUpdate>

		if (API_debounceReadKey ()) {
 8002824:	f7fd fe80 	bl	8000528 <API_debounceReadKey>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <main+0x6a>

			tick_t newFrequency = calculateFrequency (&delayLed);
 800282e:	463b      	mov	r3, r7
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f811 	bl	8002858 <calculateFrequency>
 8002836:	60f8      	str	r0, [r7, #12]

			API_delayWrite (&delayLed, newFrequency);
 8002838:	463b      	mov	r3, r7
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd ff60 	bl	8000702 <API_delayWrite>

		}

		if (API_delayRead (&delayLed)) {
 8002842:	463b      	mov	r3, r7
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd ff31 	bl	80006ac <API_delayRead>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0e7      	beq.n	8002820 <main+0x48>

			BSP_LED_Toggle (LED1);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe fa5f 	bl	8000d14 <BSP_LED_Toggle>
		API_debounceFsmUpdate ();
 8002856:	e7e3      	b.n	8002820 <main+0x48>

08002858 <calculateFrequency>:
 *
 * @param delay: LED delay structure
 *
 * @return newFrequency: New oscillation frequency
 */
static tick_t calculateFrequency (delay_t* delay) {
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

	tick_t newFrequency = DEFAULT_PERIOD_10MS;
 8002860:	2305      	movs	r3, #5
 8002862:	617b      	str	r3, [r7, #20]

	if (delay != NULL) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d033      	beq.n	80028d2 <calculateFrequency+0x7a>

		uint32_t frequencies[NUM_FREQUENCIES] = {
 800286a:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <calculateFrequency+0x88>)
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002874:	e883 0003 	stmia.w	r3, {r0, r1}
				FREQUENCY_01HZ,
				FREQUENCY_05HZ

		};

		for (int8_t index = 0; index < NUM_FREQUENCIES; index++) {
 8002878:	2300      	movs	r3, #0
 800287a:	74fb      	strb	r3, [r7, #19]
 800287c:	e025      	b.n	80028ca <calculateFrequency+0x72>

			if (frequencies[index] == delay->duration) {
 800287e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3318      	adds	r3, #24
 8002886:	443b      	add	r3, r7
 8002888:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d114      	bne.n	80028be <calculateFrequency+0x66>

				int8_t newIndex = (++index) % NUM_FREQUENCIES;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	3301      	adds	r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	74fb      	strb	r3, [r7, #19]
 800289c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	bfb8      	it	lt
 80028a8:	425b      	neglt	r3, r3
 80028aa:	74bb      	strb	r3, [r7, #18]

				newFrequency = frequencies [newIndex];
 80028ac:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	3318      	adds	r3, #24
 80028b4:	443b      	add	r3, r7
 80028b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80028ba:	617b      	str	r3, [r7, #20]

				break;
 80028bc:	e009      	b.n	80028d2 <calculateFrequency+0x7a>
		for (int8_t index = 0; index < NUM_FREQUENCIES; index++) {
 80028be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	74fb      	strb	r3, [r7, #19]
 80028ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	ddd5      	ble.n	800287e <calculateFrequency+0x26>

		}

	}

	return newFrequency;
 80028d2:	697b      	ldr	r3, [r7, #20]

}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	08002bb0 	.word	0x08002bb0

080028e4 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b094      	sub	sp, #80	; 0x50
 80028e8:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <SystemClock_Config+0xbc>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a2b      	ldr	r2, [pc, #172]	; (80029a0 <SystemClock_Config+0xbc>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <SystemClock_Config+0xbc>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <SystemClock_Config+0xc0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <SystemClock_Config+0xc0>)
 8002910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <SystemClock_Config+0xc0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002922:	2301      	movs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002926:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800292a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800292c:	2302      	movs	r3, #2
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002930:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002936:	2308      	movs	r3, #8
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800293a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002940:	2302      	movs	r3, #2
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002944:	2307      	movs	r3, #7
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fee9 	bl	8001724 <HAL_RCC_OscConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002958:	f000 f826 	bl	80029a8 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800295c:	f7fe fe92 	bl	8001684 <HAL_PWREx_EnableOverDrive>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002966:	f000 f81f 	bl	80029a8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800296a:	230f      	movs	r3, #15
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800296e:	2302      	movs	r3, #2
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002972:	2300      	movs	r3, #0
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002976:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002982:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002986:	2105      	movs	r1, #5
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f943 	bl	8001c14 <HAL_RCC_ClockConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002994:	f000 f808 	bl	80029a8 <Error_Handler>
  }
}
 8002998:	bf00      	nop
 800299a:	3750      	adds	r7, #80	; 0x50
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000

080029a8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f7fe f997 	bl	8000ce0 <BSP_LED_On>
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <Error_Handler+0xa>

080029b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ba:	e003      	b.n	80029c4 <LoopCopyDataInit>

080029bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029c2:	3104      	adds	r1, #4

080029c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029c4:	480b      	ldr	r0, [pc, #44]	; (80029f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029cc:	d3f6      	bcc.n	80029bc <CopyDataInit>
  ldr  r2, =_sbss
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029d0:	e002      	b.n	80029d8 <LoopFillZerobss>

080029d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029d4:	f842 3b04 	str.w	r3, [r2], #4

080029d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029dc:	d3f9      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029de:	f7fe fa27 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f000 f885 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e6:	f7ff fef7 	bl	80027d8 <main>
  bx  lr    
 80029ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029ec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80029f0:	08002cbc 	.word	0x08002cbc
  ldr  r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029f8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80029fc:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002a00:	20000090 	.word	0x20000090

08002a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC_IRQHandler>

08002a06 <__itoa>:
 8002a06:	1e93      	subs	r3, r2, #2
 8002a08:	2b22      	cmp	r3, #34	; 0x22
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	d904      	bls.n	8002a1a <__itoa+0x14>
 8002a10:	2300      	movs	r3, #0
 8002a12:	700b      	strb	r3, [r1, #0]
 8002a14:	461c      	mov	r4, r3
 8002a16:	4620      	mov	r0, r4
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	2a0a      	cmp	r2, #10
 8002a1c:	d109      	bne.n	8002a32 <__itoa+0x2c>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	da07      	bge.n	8002a32 <__itoa+0x2c>
 8002a22:	232d      	movs	r3, #45	; 0x2d
 8002a24:	700b      	strb	r3, [r1, #0]
 8002a26:	4240      	negs	r0, r0
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4421      	add	r1, r4
 8002a2c:	f000 f806 	bl	8002a3c <__utoa>
 8002a30:	e7f1      	b.n	8002a16 <__itoa+0x10>
 8002a32:	2100      	movs	r1, #0
 8002a34:	e7f9      	b.n	8002a2a <__itoa+0x24>

08002a36 <itoa>:
 8002a36:	f7ff bfe6 	b.w	8002a06 <__itoa>
	...

08002a3c <__utoa>:
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	4c1f      	ldr	r4, [pc, #124]	; (8002abc <__utoa+0x80>)
 8002a40:	b08b      	sub	sp, #44	; 0x2c
 8002a42:	4605      	mov	r5, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	466e      	mov	r6, sp
 8002a48:	f104 0c20 	add.w	ip, r4, #32
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	6861      	ldr	r1, [r4, #4]
 8002a50:	4637      	mov	r7, r6
 8002a52:	c703      	stmia	r7!, {r0, r1}
 8002a54:	3408      	adds	r4, #8
 8002a56:	4564      	cmp	r4, ip
 8002a58:	463e      	mov	r6, r7
 8002a5a:	d1f7      	bne.n	8002a4c <__utoa+0x10>
 8002a5c:	7921      	ldrb	r1, [r4, #4]
 8002a5e:	7139      	strb	r1, [r7, #4]
 8002a60:	1e91      	subs	r1, r2, #2
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	6038      	str	r0, [r7, #0]
 8002a66:	2922      	cmp	r1, #34	; 0x22
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	d904      	bls.n	8002a78 <__utoa+0x3c>
 8002a6e:	7019      	strb	r1, [r3, #0]
 8002a70:	460b      	mov	r3, r1
 8002a72:	4618      	mov	r0, r3
 8002a74:	b00b      	add	sp, #44	; 0x2c
 8002a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	4684      	mov	ip, r0
 8002a7c:	fbb5 f7f2 	udiv	r7, r5, r2
 8002a80:	fb02 5617 	mls	r6, r2, r7, r5
 8002a84:	3628      	adds	r6, #40	; 0x28
 8002a86:	446e      	add	r6, sp
 8002a88:	460c      	mov	r4, r1
 8002a8a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002a8e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002a92:	462e      	mov	r6, r5
 8002a94:	42b2      	cmp	r2, r6
 8002a96:	f101 0101 	add.w	r1, r1, #1
 8002a9a:	463d      	mov	r5, r7
 8002a9c:	d9ee      	bls.n	8002a7c <__utoa+0x40>
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	545a      	strb	r2, [r3, r1]
 8002aa2:	1919      	adds	r1, r3, r4
 8002aa4:	1aa5      	subs	r5, r4, r2
 8002aa6:	42aa      	cmp	r2, r5
 8002aa8:	dae3      	bge.n	8002a72 <__utoa+0x36>
 8002aaa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002aae:	780e      	ldrb	r6, [r1, #0]
 8002ab0:	7006      	strb	r6, [r0, #0]
 8002ab2:	3201      	adds	r2, #1
 8002ab4:	f801 5901 	strb.w	r5, [r1], #-1
 8002ab8:	e7f4      	b.n	8002aa4 <__utoa+0x68>
 8002aba:	bf00      	nop
 8002abc:	08002c84 	.word	0x08002c84

08002ac0 <memset>:
 8002ac0:	4402      	add	r2, r0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <strcat>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	7814      	ldrb	r4, [r2, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	3201      	adds	r2, #1
 8002ada:	2c00      	cmp	r4, #0
 8002adc:	d1fa      	bne.n	8002ad4 <strcat+0x4>
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ae4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d1f9      	bne.n	8002ae0 <strcat+0x10>
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4d0d      	ldr	r5, [pc, #52]	; (8002b28 <__libc_init_array+0x38>)
 8002af4:	4c0d      	ldr	r4, [pc, #52]	; (8002b2c <__libc_init_array+0x3c>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	2600      	movs	r6, #0
 8002afc:	42a6      	cmp	r6, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	4d0b      	ldr	r5, [pc, #44]	; (8002b30 <__libc_init_array+0x40>)
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__libc_init_array+0x44>)
 8002b04:	f000 f818 	bl	8002b38 <_init>
 8002b08:	1b64      	subs	r4, r4, r5
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	42a6      	cmp	r6, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b18:	4798      	blx	r3
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b22:	4798      	blx	r3
 8002b24:	3601      	adds	r6, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08002cb4 	.word	0x08002cb4
 8002b2c:	08002cb4 	.word	0x08002cb4
 8002b30:	08002cb4 	.word	0x08002cb4
 8002b34:	08002cb8 	.word	0x08002cb8

08002b38 <_init>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

08002b44 <_fini>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr
